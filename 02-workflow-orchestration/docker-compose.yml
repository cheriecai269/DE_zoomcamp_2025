volumes:
  postgres-data:
    driver: local
  kestra-data:
    driver: local

services:
  postgres:
    image: postgres:latest # This postgres is for Kestra to handle data, e.g. store data etc. However, in our ETL exercise, we use the postgres-db container rather than this one. This one does not have port and it is not exposed.
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10

  kestra:
    image: kestra/kestra:latest
    # image: kestra/kestra:latest-no-plugins # This gives a smaller image without any plugins
    # Can also use developer or enterprise images
    pull_policy: always
    user: "root"
    command: server standalone
    volumes:
      - kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    environment:  
      # below postgres is Kestra's database for storing Kestra's metadata. It's part of default set up of Kestra
      KESTRA_CONFIGURATION: | 
        datasources:
          postgres: 
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: kestra
            password: k3str4
        kestra:
          server:
            basicAuth:
              enabled: false
              username: "admin@kestra.io" # it must be a valid email address
              password: kestra
          repository:
            type: postgres
          storage:
            type: local
            local:
              basePath: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmpDir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
          # Disable the tutorial flow
          tutorial-flows:  
            enabled: false  
    ports: # This is Kestra's port 8080, which can be accessed from http://localhost:8080/
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_started